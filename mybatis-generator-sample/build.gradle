buildscript {

    def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

    logger.quiet(localMavenRepo)

    repositories {
        maven { url localMavenRepo }
        // 本地maven仓库
        mavenLocal()
        // 阿里的源
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    dependencies {
        classpath 'org.chance:mybatis-generator-gradle-plugin:0.1.0'
    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.chance.gradle.MybatisGenerator'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.0'
    // 加入了H2 数据库的引用的话，其将会把数据持久化到H2 内存数据库中。
    // 通过启动日志可以得到 H2的连接的URL为jdbc:h2:mem:testdb
    // 默认的用户名为sa，密码为空
    // 浏览器，输入http://localhost:8080/h2-console/ 就可以进去web控制台
//    runtimeOnly 'com.h2database:h2'
    implementation 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

configurations {
    mybatisGenerator
}

mybatisGenerator {
    verbose = true
//    configFile = 'src/main/resources/autogen/generatorConfig.xml'
    configFile = 'src/main/resources/autogen/myGeneratorConfig.xml'

    // optional, here is the override dependencies for the plugin or you can add other database dependencies.
    dependencies {
//        mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.7'
        // 可以配置使用官方的
        mybatisGenerator 'org.chance:mybatis-generator-core:0.1.0'
        mybatisGenerator 'mysql:mysql-connector-java:5.1.47'
        mybatisGenerator 'com.h2database:h2:1.4.199'
        mybatisGenerator  // Here add your mariadb dependencies or else
    }
}
